#!/bin/bash

#STUDANT NAME: SHAGALOV YARON 
#CODE:S12
#CLASS CODE: 7736/20
#LECTURER: SEGEV EREL

figlet "VULNER"
echo "by Yaron Shagalov" 
echo




# This function ensures the input network range is valid.
function VLD() 
{
    nmap $RNG -sL 2> .chk 1> .scan  # .scan will contain all IPs
    if [ ! -z "$(cat .chk)" ]; then
        echo "[!] Wrong input, check your input..."
        exit 1
    else 
        echo "[*] Input was correct, continue..."
    fi
}

# Basic scan: scans the network for TCP and UDP, including the service version and weak passwords.
function SCN1() {
    for IP in $(cat .scan | awk '{print $NF}' | grep ^[0-9]); 
    do
        echo "[*] Scanning $IP (it may take some time....)"
        nmap  -T4 -sV -p1-65535  $IP --open >> PT/$DTA/$IP  # Scans all tcp ports
        masscan --ports 1-65535 $IP --rate=5000 >>PT/$DTA/$IP 2>/dev/null # Scans all udp ports
    done
    wait # Wait for all background processes to finish
    echo "[*] Scan complited, continue..."
    cd PT/$DTA || { echo "Failed to change directory to PT/$DTA"; exit 1; }
}

# Full scan: includes Nmap Scripting Engine (NSE), weak passwords, and vulnerability analysis.
function SCN2() {
    for IP in $(cat .scan | awk '{print $NF}' | grep ^[0-9]); 
    do 
        echo "[*] Scanning $IP"
        nmap -sV -p1-65535 --script=vuln,brute $IP -oX PT/$DTA/$IP.xml > PT/$DTA/$IP &
        masscan --ports 1-65535 $IP --rate=5000 >>PT/$DTA/$IP 2>/dev/null
    done 
    wait # Wait for all background processes to finish
    cd PT/$DTA || { echo "Failed to change directory to PT/$DTA"; exit 1; }
}

# Function to choose how to check for weak passwords: using Hydra or Nmap.
function CHK_WEAK_PASS() {
    read -p "[?] Do you want to use [H]ydra or [N]map to check for weak passwords? " TOOL
    case $TOOL in
        H|h)
            HYD  # Use Hydra for checking weak passwords
            ;;
        N|n)
            NMAP_WEAK_PASS  # Use Nmap for checking weak passwords
            ;;
        *)
            echo "Invalid choice. Please choose [H]ydra or [N]map."
            CHK_WEAK_PASS  # Retry if the choice is invalid
            ;;
    esac
}

# Function for checking weak passwords using Nmap.
function NMAP_WEAK_PASS() 
{
    for IP in $(cat * | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | sort |uniq);
    do 
        echo "[*] Checking for weak passwords on $IP using Nmap..."
        nmap -sV --script=brute  $IP -oX RES_$IP.xml 
    done
        echo "Done checking weak credentials with Nmap."
    echo
    CONVERT   
}

function CONVERT()
{
   
     for X in $( ls | grep '.xml');
     do
            echo "[*] Converting $X files to html...."
            xsltproc $X -o $X.html 2> /dev/null
    done
        echo "[!] Done converting xml files to html!"
        echo 
        echo "[*] Compressing the resulets into zip file..."
        ZIP_RES

}

# Function for checking weak passwords using Hydra.
function HYD()
{
    #choose if you want to use hydra or nmap to check ffor weak passwords
    read -p "[+] Enter a path to your password file: " PASS
    read -p "[+] Enter a path to your user list: " USER
    echo
    # Check if the password file exists
    if [ ! -f "$PASS" ]; then
        echo "[!] Password file not found, check your input..."
        exit 1
    else 
        echo "[*] Password file found, continue..."
    fi

    # Check if the user file exists
    if [ ! -f "$USER" ]; then
        echo "[!] User list file not found, check your input..."
        exit 1
    else 
        echo "[*] User list file found, continue..."
    fi
echo 
    
    # Loop through results to brute force detected services
    for i in $(grep -E '22/tcp|21/tcp|3389/tcp|23/tcp' -nRw --include="*" | awk -F':' '{print $1}' | sort | uniq); do 
        echo "Brute forcing $i...."
        sleep 0.5

        hydra -L "$USER" -P "$PASS" ssh://"$i" >> hydrapass_$i.txt  2> /dev/null
        hydra -L "$USER" -P "$PASS" ftp://"$i" >> hydrapass_$i.txt 2> /dev/null
        hydra -L "$USER" -P "$PASS" rdp://"$i" >> hydrapass_$i.txt 2> /dev/null
        hydra -L "$USER" -P "$PASS" telnet://"$i" >> hydrapass_$i.txt 2> /dev/null
    done
    echo
    echo "Done testing weak credentials."
    echo 
    ZIP_RES
}

function ZIP_RES()
{
        cd ../
        if [ -d "$DTA" ]; then
            zip -r "$DTA.zip" "$DTA"  > /dev/null
            echo "Results saved in $DTA.zip"
        else
            echo "Directory $DTA not found. Cannot zip results."
            exit 1
        fi
        START   

}

# Function to scan based on user choice: Basic or Full
function SCN() {
    read -p "[?] Choose [B]asic or [F]ull: " CHK
    echo
    case $CHK in
        B|b)
            echo "[*] Basic scan was chosen"
            echo
            read -p "[?] Enter a range to scan: " RNG
            VLD  # Validate the scan
            echo
            read -p "[+] Enter a directory to save the data: " DTA
            echo
            mkdir -p PT/$DTA || { echo "Failed to create directory PT/$DTA"; exit 1; }
            echo
            SCN1  # Perform the basic scan
            echo
            CHK_WEAK_PASS
            echo
            ;;
        F|f)
            echo "Full scan was chosen"
            echo
            read -p "[+] Enter a range to scan: " RNG
            VLD
            read -p "[+] Enter a directory to save the data: " DTA
            mkdir -p PT/$DTA || { echo "Failed to create directory PT/$DTA"; exit 1; }
            SCN2  # Perform the full scan
            CONVERT # Converting xml files to html 
            ;;
        *)
            echo "Invalid choice. Please choose [B]asic or [F]ull."
            ;;
    esac
}

# Function to inspect previous scans
function INSP() {
    read -p "[+] Choose IP to inspect: " IPI
    cat "$(find PT -type f -name "$IPI")"
    read -n1 -r -p "Press any key to continue..." key
    echo
    START
}

# Main function to start the script
function START() {
    read -p "[?] [I]nspect previous scans or do a [N]ew one? " CHK
    case $CHK in
        I|i)
            INSP  # Allow user to inspect previous scans
            ;;
        N|n)
            SCN  # Perform a new scan
            ;;
        *)
            echo "Invalid option. Please choose [I]nspect or [N]ew."
            ;;
    esac
}

# Function to check if the script is run as root
function CHECK_ROOT() {
    if [ "$(whoami)" != "root" ]; then
        echo "Must be root to run this script. Exiting..."
        exit 1
    fi
    START
}

# Start the script by checking root privileges
CHECK_ROOT